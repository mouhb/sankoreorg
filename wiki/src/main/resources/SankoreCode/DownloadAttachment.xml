<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>SankoreCode</web>
<name>DownloadAttachment</name>
<language></language>
<defaultLanguage>fr</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1386776005000</creationDate>
<date>1386776005000</date>
<contentUpdateDate>1386776005000</contentUpdateDate>
<version>1.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.RequiredRightClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<level>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>0</multiSelect>
<name>level</name>
<number>1</number>
<picker>0</picker>
<prettyName>level</prettyName>
<relationalStorage>0</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>1</size>
<sort>none</sort>
<unmodifiable>0</unmodifiable>
<validationMessage></validationMessage>
<validationRegExp></validationRegExp>
<values>edit|programming</values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</level>
</class>
<name>SankoreCode.DownloadAttachment</name>
<number>0</number>
<className>XWiki.RequiredRightClass</className>
<guid>9322fdbd-d9bf-46b1-870c-145406ac5096</guid>
<property>
<level>programming</level>
</property>
</object>
<content>{{groovy}}
import java.io.ByteArrayOutputStream
import com.xpn.xwiki.api.Context
import com.xpn.xwiki.XWikiContext
import com.xpn.xwiki.doc.XWikiDocument
import com.xpn.xwiki.doc.XWikiAttachment
import org.apache.commons.io.IOUtils

import java.util.regex.Pattern
import java.util.zip.ZipEntry
import java.util.zip.ZipInputStream

class Downloader
{
    private XWikiContext context;

    public Downloader(Context context)
    {
        this.context = context.getContext();
    }

    public void downloadAttachment(String document, String extension)
    {
        XWikiDocument xwikiDocument = this.context.getWiki().getDocument(document, this.context);
        List&lt;XWikiAttachment&gt; attachmentList = xwikiDocument.getAttachmentList();
        if(attachmentList.size() &gt; 0) {
          XWikiAttachment xWikiAttachment = attachmentList.get(0);
          if(extension &amp;&amp; (extension == "pdf" || extension == "ubz")) {
            //it's a zip just download the file with extension fileExtension
            def contentType = ["pdf": "application/pdf", "ubz": "application/octet-stream"];
            flushZipContent(xWikiAttachment.getContentInputStream(this.context), xwikiDocument.getTitle(), extension, contentType.get(extension));
          } else {
            flushOutput(xWikiAttachment.getContentInputStream(this.context), xwikiDocument.getTitle(), xWikiAttachment.getFilename().substring(xWikiAttachment.getFilename().lastIndexOf('.')), xWikiAttachment.getMimeType(this.context));
          }
        }
      }

    private void flushZipContent(InputStream attachmentInputStream, String fileName, String extension, String contentType) {
        ZipInputStream zipInputStream = new ZipInputStream(attachmentInputStream);
        ZipEntry ze = null
        while((ze = zipInputStream.nextEntry) != null) {
            if(ze.name.endsWith(".$extension")) {
                flushOutput(zipInputStream, fileName, extension, contentType);
                break;
            }
        }
    }

    private void flushOutput(InputStream inputStream, String fileName, String extension, String contentType)
    {
        String fileNameEscaped = Pattern.compile("\\p{Punct}").matcher(fileName).replaceAll("");
        fileName = URLEncoder.encode(fileNameEscaped, "UTF-8");
        if(extension.startsWith(".")) {
            extension = extension.substring(1);
        }
        def response = context.getResponse();
        response.setContentType(contentType);
        response.setHeader("Content-Disposition", "attachment;filename=$fileName.$extension");
        IOUtils.copy(inputStream, context.getResponse().getOutputStream());
    }
}

def downloader = new Downloader(xcontext);
downloader.downloadAttachment(request.get('document'), request.get('fileExtension'));
{{/groovy}}</content></xwikidoc>